{"name":"Configuration","tagline":"Analyse configuration files in OCaml","body":"# Configuration, analyse configuration files\r\n\r\nThe **Configuration** projects implements a library to analyse\r\nconfiguration files written in some flavour of the popular INI-file\r\nsyntax.\r\n\r\n[![Build Status](https://travis-ci.org/michipili/configuration.svg?branch=master)](https://travis-ci.org/michipili/configuration?branch=master)\r\n\r\nIt supports comments, quoted section names, quoted configuration\r\nvalues and configuration values spreading over several lines.\r\n\r\n\r\n## Configuration Parser\r\n\r\nThe module *Configuration_Parser* implements a functional\r\nconfiguration parser.  This is actually a functor parametrised by a\r\nparser definition defining the behaviour of the parser. The parser\r\ndefinition has the following signature:\r\n\r\n```ocaml\r\n(** The input signature of the functor [Configuration_Parser.Make]. *)\r\nmodule type Definition =\r\nsig\r\n\r\n  (** The type of functional parser state. *)\r\n  type t\r\n\r\n  (** Receive a comment. *)\r\n  val comment : excerpt -> t -> t\r\n\r\n  (** Receive a section specification. *)\r\n  val section : excerpt list -> t -> t\r\n\r\n  (** Receive a binding specificaton. *)\r\n  val binding : excerpt -> excerpt -> t -> t\r\n\r\n  (** Receive a parser error. *)\r\n  val parse_error : pos -> error -> t -> t\r\n\r\nend\r\n```\r\n\r\nA parser definition must define four events functionally editing a\r\nparser state. The *excerpt* state used in the signature above is a\r\npiece of text decorated with location information.\r\n\r\n\r\n## Configuration Map\r\n\r\nA *configuration map* holds configuration *values* associated to a\r\nconfiguration *path*.  It is possible to read configuration maps from\r\nfiles, strings, or directly from a list of bindings:\r\n\r\n```ocaml\r\n(** Read configuration values from a file. *)\r\nval from_file : string -> t\r\n\r\n(** Read configuration values from a string. *)\r\nval from_string : string -> t\r\n\r\n(** Read configuration values from an alist. *)\r\nval from_alist : ((string list * string) * string) list -> t\r\n```\r\n\r\nConfiguration maps can also be extended and combined together:\r\n\r\n```ocaml\r\n(** The empty configuration map. *)\r\nval empty : t\r\n\r\n(** Add a configuration binding. *)\r\nval add : (string list * string) -> string -> t -> t\r\n\r\n(** [merge a b] is a configuration map looking up values in [a] then\r\n    in [b]. *)\r\nval merge : t -> t -> t\r\n\r\n(** [override a b] a configuration map whose keys are the same as\r\n    [a] and the values are possibly overriden by those found in [b]. *)\r\nval override : t -> t -> t\r\n```\r\n\r\nThe *merge* and *override* operations make it easy to combine\r\nsite-wide and user-specific configurations and can be used to let the\r\nsite administrator enforce some specific values.\r\n\r\nRetrieving individual values from a configuration map is accomplished\r\nusing configuration keys:\r\n\r\n```ocaml\r\n(** The type of configuration keys.  A configuration key can be used\r\n    to retrieve a configuration value. *)\r\ntype 'a key = {\r\n  concrete: 'a concrete;\r\n  path: string list;\r\n  name: string;\r\n  default: 'a;\r\n  description: string;\r\n}\r\n\r\n(** The type of configuration values concrete representations.\r\n    A concrete representation should use the [parse_error] function below\r\n    to advertise errors. *)\r\nand 'a concrete = {\r\n  of_string: string -> 'a;\r\n  to_string: 'a -> string;\r\n}\r\n\r\n(** [key concrete path name default description] create a key\r\n    out of its given parts. *)\r\nval key : ('a concrete) -> string list -> string -> 'a -> string -> 'a key\r\n\r\n(** Get the value associated with an key.  On error conditions, the\r\n    default value from the key is returned. *)\r\nval get : t -> 'a key -> 'a\r\n```\r\n\r\nLast, configuration maps support the definitions of *functional\r\neditors* which ease the editing of program parameters given a\r\nconfiguration map:\r\n\r\n```ocaml\r\n(** The abstract type of functional configuration editors,\r\n    functionally editing a value of type ['b]. *)\r\ntype 'b editor\r\n\r\n(** [editor key edit] create a functional configuration editor consuming\r\n    keys described by [key] and functionally editing a value of type\r\n    ['b] with [edit]. *)\r\nval editor : 'a key -> ('a -> 'b -> 'b) -> 'b editor\r\n\r\n(** Explicitely edit the given value with the provided editor. *)\r\nval apply : t -> 'b editor -> 'b -> 'b\r\n```\r\n\r\nThe *apply* function can easily be combined with *List.fold_right*.\r\n\r\nThe *xmap* function defines a natural isomorphism between editors of\r\ntwo different functional values, which can be used in combination with\r\n[lenses][lenses-home]:\r\n\r\n```ocaml\r\n(** [xmap get set editor] convert an editor functionally modifying a\r\n    value of type ['b] in an editor functionally modifying a value of type\r\n    ['a].  This can be used in conjunction with lenses to separately\r\n    configure the different modules of an application. *)\r\nval xmap : ('a -> 'b) -> ('b -> 'a -> 'a) -> 'b editor -> 'a editor\r\n```\r\n\r\n\r\n## Free software\r\n\r\nIt is written by Michael Grünewald and is distributed as a free\r\nsoftware: copying it  and redistributing it is\r\nvery much welcome under conditions of the [CeCILL-B][licence-url]\r\nlicence agreement, found in the [COPYING][licence-en] and\r\n[COPYING-FR][licence-fr] files of the distribution.\r\n\r\n\r\n## Setup guide\r\n\r\nIt is easy to install **Configuration** using **opam** and its *pinning*\r\nfeature.  In a shell visiting the repository, say\r\n\r\n```console\r\n% opam pin add configuration .\r\n```\r\n\r\nIt is also possible to install **Configuration** manually.\r\nThe installation procedure is based on the portable build system\r\n[BSD Owl Scripts][bsdowl-home] written for BSD Make.\r\n\r\n1. Verify that prerequisites are installed:\r\n   - GNU Autoconf\r\n   - BSD Make\r\n   - OCaml\r\n   - [BSD Owl][bsdowl-install]\r\n   - [Broken][broken-home]\r\n\r\n2. Get the source, either by cloning the repository or by exploding a\r\n   [distribution tarball](releases).\r\n\r\n3. Optionally run `autoconf` to produce a configuration script. This\r\n   is only required if the script is not already present.\r\n\r\n4. Run `./configure`, you can choose the installation prefix with\r\n   `--prefix`.\r\n\r\n5. Run `make build`.\r\n\r\n6. Optionally run `make test` to test your build.\r\n\r\n7. Finally run `make install`.\r\n\r\nDepending on how **BSD Make** is called on your system, you may need to\r\nreplace `make` by `bsdmake` or `bmake` in steps 5, 6, and 7.\r\nThe **GNU Make** program usually give up the ghost, croaking\r\n`*** missing separator. Stop.` when you mistakingly use it instead of\r\n**BSD Make**.\r\n\r\nStep 7 requires that you can `su -` if you are not already `root`.\r\n\r\n\r\nMichael Grünewald in Bonn, on August 15, 2015\r\n\r\n\r\n  [licence-url]:        http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html\r\n  [licence-en]:         COPYING\r\n  [licence-fr]:         COPYING-FR\r\n  [bsdowl-home]:        https://github.com/michipili/bsdowl\r\n  [bsdowl-install]:     https://github.com/michipili/bsdowl/wiki/Install\r\n  [broken-home]:        https://github.com/michipili/broken\r\n  [lenses-home]:        https://github.com/https://github.com/avsm/ocaml-lens\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}